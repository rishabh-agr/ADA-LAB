// knapsack using dynamic programming


#include <stdio.h>

#define N 4

int max(int a, int b) {
    return (a > b) ? a : b;
}

void knapsack(int weights[], int profits[], int W) {
    int dp[N+1][W+1];

    // Initialize the dp array
    for (int i = 0; i <= N; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i-1] <= w)
                dp[i][w] = max(profits[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]);
            else
                dp[i][w] = dp[i-1][w];
        }
    }

    // Maximum profit will be in dp[N][W]
    printf("Maximum profit: %d\n", dp[N][W]);

    // To find which items were selected
    int selected[N];
    int i = N, j = W;
    while (i > 0 && j > 0) {
        if (dp[i][j] != dp[i-1][j]) {
            selected[i-1] = 1;
            j -= weights[i-1];
        } else {
            selected[i-1] = 0;
        }
        i--;
    }

    // Display selected items
    printf("Objects selected in knapsack:\n");
    for (int i = 0; i < N; i++) {
        if (selected[i])
            printf("Object %d (Weight: %d, Profit: %d)\n", i + 1, weights[i], profits[i]);
    }
}

int main() {
    int weights[] = {2, 1, 3, 2};
    int profits[] = {12, 10, 20, 15};
    int W = 5; // Knapsack capacity

    knapsack(weights, profits, W);

    return 0;
}




// Prims's Algo for MST



#include <stdio.h>

#define N 4

int max(int a, int b) {
    return (a > b) ? a : b;
}

void knapsack(int weights[], int profits[], int W) {
    int dp[N+1][W+1];

    // Initialize the dp array
    for (int i = 0; i <= N; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i-1] <= w)
                dp[i][w] = max(profits[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]);
            else
                dp[i][w] = dp[i-1][w];
        }
    }

    // Maximum profit will be in dp[N][W]
    printf("Maximum profit: %d\n", dp[N][W]);

    // To find which items were selected
    int selected[N];
    int i = N, j = W;
    while (i > 0 && j > 0) {
        if (dp[i][j] != dp[i-1][j]) {
            selected[i-1] = 1;
            j -= weights[i-1];
        } else {
            selected[i-1] = 0;
        }
        i--;
    }

    // Display selected items
    printf("Objects selected in knapsack:\n");
    for (int i = 0; i < N; i++) {
        if (selected[i])
            printf("Object %d (Weight: %d, Profit: %d)\n", i + 1, weights[i], profits[i]);
    }
}

int main() {
    int weights[] = {2, 1, 3, 2};
    int profits[] = {12, 10, 20, 15};
    int W = 5; // Knapsack capacity

    knapsack(weights, profits, W);

    return 0;
}
